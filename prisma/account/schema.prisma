generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_ACC")
}
generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./dbml"
}
generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output = "./jsonSchema"
}
generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "./NestDto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}
// ##### DATABASE MODELS
model user {
  id            Int                 @id @default(autoincrement())
  username      String?
  email         String              @unique
  password      String
  profile       user_profile?
  billing       user_billing?
  address       user_address?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}
model user_profile {
  id            Int                 @id @default(autoincrement())
  user          user                @relation(fields: [userId], references: [id])
  userId        Int                 @unique
  firstName     String?
  lastName      String?
  avatarImg     String?
  coverImg      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}
model user_billing {
  id            Int                 @id @default(autoincrement())
  user          user                @relation(fields: [userId], references: [id])
  userId        Int                 @unique
  accountName   String?
  accountNumber String?
  bankName      String?
  sortCode      String?
  invoice       user_invoice?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}
model user_address {
    id            Int                 @id @default(autoincrement())
    user          user                @relation(fields: [userId], references: [id])
    userId        Int                 @unique
    address       String?
    city          String?
    state         String?
    country       String?
    zip           String?
    createdAt     DateTime            @default(now())
    updatedAt     DateTime            @updatedAt
}
model user_invoice {
    id                    Int               @id @default(autoincrement())
    billing               user_billing      @relation(fields: [user_billingId], references: [id])
    user_billingId        Int               @unique
    invoiceNumber         String?
    invoiceDate           DateTime?
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
}
